=begin
#Aspose.ThreeD Cloud API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.11-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for AsposeThreeDCloud::ThreeDCloudApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'ThreeDCloudApi' do
  before do
    # run before each test
    @instance = AsposeThreeDCloud::ThreeDCloudApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ThreeDCloudApi' do
    it 'should create an instance of ThreeDCloudApi' do
      expect(@instance).to be_instance_of(AsposeThreeDCloud::ThreeDCloudApi)
    end
  end

  # unit tests for copy_file
  # Copy file
  # 
  # @param src_path Source file path e.g. &#39;/folder/file.ext&#39;
  # @param dest_path Destination file path
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @option opts [String] :version_id File version ID to copy
  # @return [nil]
  describe 'copy_file test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for copy_folder
  # Copy folder
  # 
  # @param src_path Source folder path e.g. &#39;/src&#39;
  # @param dest_path Destination folder path e.g. &#39;/dst&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @return [nil]
  describe 'copy_folder test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_folder
  # Create the folder
  # 
  # @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [nil]
  describe 'create_folder test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_file
  # Delete file
  # 
  # @param path File path e.g. &#39;/folder/file.ext&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @option opts [String] :version_id File version ID to delete
  # @return [nil]
  describe 'delete_file test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_folder
  # Delete folder
  # 
  # @param path Folder path e.g. &#39;/folder&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @option opts [BOOLEAN] :recursive Enable to delete folders, subfolders and files
  # @return [nil]
  describe 'delete_folder test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_nodes
  # Delete nodes from scene,nodes are addressed by Object Addressing Path
  # 
  # @param name The name of the source file.
  # @param objectaddressingpath The object addressing path.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :folder The folder of the source file.
  # @option opts [String] :storage The storage type
  # @return [File]
  describe 'delete_nodes test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for download_file
  # Download file
  # 
  # @param path File path e.g. &#39;/folder/file.ext&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @option opts [String] :version_id File version ID to download
  # @return [File]
  describe 'download_file test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_disc_usage
  # Get disc usage
  # 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [DiscUsage]
  describe 'get_disc_usage test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_file_versions
  # Get file versions
  # 
  # @param path File path e.g. &#39;/file.ext&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [FileVersions]
  describe 'get_file_versions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_files_list
  # Get all files and folders within a folder
  # 
  # @param path Folder path e.g. &#39;/folder&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [FilesList]
  describe 'get_files_list test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for move_file
  # Move file
  # 
  # @param src_path Source file path e.g. &#39;/src.ext&#39;
  # @param dest_path Destination file path e.g. &#39;/dest.ext&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @option opts [String] :version_id File version ID to move
  # @return [nil]
  describe 'move_file test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for move_folder
  # Move folder
  # 
  # @param src_path Folder path to move e.g. &#39;/folder&#39;
  # @param dest_path Destination folder path to move to e.g &#39;/dst&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :src_storage_name Source storage name
  # @option opts [String] :dest_storage_name Destination storage name
  # @return [nil]
  describe 'move_folder test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for o_auth_post
  # Get Access token
  # 
  # @param grant_type Grant Type
  # @param client_id App SID
  # @param client_secret App Key
  # @param [Hash] opts the optional parameters
  # @return [AccessTokenResponse]
  describe 'o_auth_post test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for object_exists
  # Check if file or folder exists
  # 
  # @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @option opts [String] :version_id File version ID
  # @return [ObjectExist]
  describe 'object_exists test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_convert_by_format
  # Convert file on server to other formats with fileformat parameter             
  # 
  # @param name The name of the source file.
  # @param newformat The format of the new file.
  # @param newfilename The name of the new file.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :folder The folder of the source file.
  # @option opts [BOOLEAN] :is_overwrite Overwrite the source file? true or false.
  # @option opts [String] :storage The storage type.
  # @return [File]
  describe 'post_convert_by_format test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_convert_by_opt
  # Convert file on server to other formats with saveOption parameter             
  # 
  # @param name The name of the source file.
  # @param save_options The saveOptions to save the file
  # @param newfilename The name of the new file
  # @param [Hash] opts the optional parameters
  # @option opts [String] :folder The folder of the source file
  # @option opts [BOOLEAN] :is_overwrite Overwrite the source file? true or false
  # @option opts [String] :storage The storage type
  # @return [File]
  describe 'post_convert_by_opt test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_create
  # Create new file with specified format.             
  # 
  # @param format The format of the new file.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'post_create test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_model
  # Parametric Modeling, Create a Entity with size and located in ...
  # 
  # @param name The name of the source file.
  # @param modeldata ModelData struct.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :newformat new format of the source file.
  # @option opts [String] :folder The folder of the source file.
  # @option opts [String] :storage The storage type
  # @return [File]
  describe 'post_model test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_pdf_raw_data
  # Extract raw data(without any modification) from a password protected PDF file             
  # 
  # @param name The PDF file&#39;s mame
  # @param multifileprefix The file name for generated raw date
  # @param [Hash] opts the optional parameters
  # @option opts [String] :password The password to open the PDF
  # @option opts [String] :folder The folder for source file
  # @option opts [String] :storage The storage type
  # @return [File]
  describe 'post_pdf_raw_data test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_save_as_part
  # Convert part of the file into different format
  # 
  # @param name The name of the source file
  # @param objectaddressingpath The object addressing path
  # @param newformat The format of the new file
  # @param newfilename The name of the new file
  # @param [Hash] opts the optional parameters
  # @option opts [String] :folder The folder of the source file
  # @option opts [BOOLEAN] :is_overwrite Overwrite the source file? true or false
  # @option opts [String] :storage The storage type
  # @return [File]
  describe 'post_save_as_part test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_scene_to_file
  # Extract and save in different format             
  # 
  # @param name The PDF file&#39;s mame
  # @param multifileprefix The file name for extracted scene
  # @param [Hash] opts the optional parameters
  # @option opts [String] :newformat The format of new file
  # @option opts [String] :password The password to open the PDF
  # @option opts [String] :folder The folder for source file
  # @option opts [String] :storage The storage type
  # @return [File]
  describe 'post_scene_to_file test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_triangulate_new
  # Triangulate whole file and save to the different file
  # 
  # @param name The file&#39;s mame
  # @param newfilename The new file&#39;s mame
  # @param newformat The new file&#39;s format
  # @param [Hash] opts the optional parameters
  # @option opts [String] :folder The folder for source file
  # @option opts [String] :storage The storage type
  # @return [File]
  describe 'post_triangulate_new test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for post_triangulate_original
  # Triangulate whole file and save to original file
  # 
  # @param name The file&#39;s mame
  # @param [Hash] opts the optional parameters
  # @option opts [String] :folder The folder for source file
  # @option opts [String] :storage The storage type
  # @return [File]
  describe 'post_triangulate_original test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for storage_exists
  # Check if storage exists
  # 
  # @param storage_name Storage name
  # @param [Hash] opts the optional parameters
  # @return [StorageExist]
  describe 'storage_exists test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_file
  # Upload file
  # 
  # @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             
  # @param file File to upload
  # @param [Hash] opts the optional parameters
  # @option opts [String] :storage_name Storage name
  # @return [FilesUploadResult]
  describe 'upload_file test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
