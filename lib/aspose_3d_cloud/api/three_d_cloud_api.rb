=begin
#Aspose.ThreeD Cloud API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.11-SNAPSHOT

=end

require "uri"

module AsposeThreeDCloud
  class ThreeDCloudApi
    attr_accessor :api_client

    def initialize(app_key, app_sid, api_client = ApiClient.default)
      @api_client = api_client
      @api_client.config.app_key = app_key
      @api_client.config.app_sid = app_sid
    end

    # Copy file
    # 
    # @param src_path Source file path e.g. &#39;/folder/file.ext&#39;
    # @param dest_path Destination file path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @option opts [String] :version_id File version ID to copy
    # @return [nil]
    def copy_file(src_path, dest_path, opts = {})
      @api_client.request_token_if_needed
      copy_file_with_http_info(src_path, dest_path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                copy_file_with_http_info(src_path, dest_path, opts)
        else
          raise
        end
      return nil
    end

    # Copy file
    # 
    # @param src_path Source file path e.g. &#39;/folder/file.ext&#39;
    # @param dest_path Destination file path
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @option opts [String] :version_id File version ID to copy
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def copy_file_with_http_info(src_path, dest_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.copy_file ..."
      end
      # verify the required parameter 'src_path' is set
      if @api_client.config.client_side_validation && src_path.nil?
        fail ArgumentError, "Missing the required parameter 'src_path' when calling ThreeDCloudApi.copy_file"
      end
      # verify the required parameter 'dest_path' is set
      if @api_client.config.client_side_validation && dest_path.nil?
        fail ArgumentError, "Missing the required parameter 'dest_path' when calling ThreeDCloudApi.copy_file"
      end
      # resource path
      local_var_path = "/3d/storage/file/copy/{srcPath}".sub('{' + 'srcPath' + '}', src_path.to_s)

      # query parameters
      query_params = {}
      query_params[:'destPath'] = dest_path
      query_params[:'srcStorageName'] = opts[:'src_storage_name'] if !opts[:'src_storage_name'].nil?
      query_params[:'destStorageName'] = opts[:'dest_storage_name'] if !opts[:'dest_storage_name'].nil?
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#copy_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Copy folder
    # 
    # @param src_path Source folder path e.g. &#39;/src&#39;
    # @param dest_path Destination folder path e.g. &#39;/dst&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @return [nil]
    def copy_folder(src_path, dest_path, opts = {})
      @api_client.request_token_if_needed
      copy_folder_with_http_info(src_path, dest_path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                copy_folder_with_http_info(src_path, dest_path, opts)
        else
          raise
        end
      return nil
    end

    # Copy folder
    # 
    # @param src_path Source folder path e.g. &#39;/src&#39;
    # @param dest_path Destination folder path e.g. &#39;/dst&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def copy_folder_with_http_info(src_path, dest_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.copy_folder ..."
      end
      # verify the required parameter 'src_path' is set
      if @api_client.config.client_side_validation && src_path.nil?
        fail ArgumentError, "Missing the required parameter 'src_path' when calling ThreeDCloudApi.copy_folder"
      end
      # verify the required parameter 'dest_path' is set
      if @api_client.config.client_side_validation && dest_path.nil?
        fail ArgumentError, "Missing the required parameter 'dest_path' when calling ThreeDCloudApi.copy_folder"
      end
      # resource path
      local_var_path = "/3d/storage/folder/copy/{srcPath}".sub('{' + 'srcPath' + '}', src_path.to_s)

      # query parameters
      query_params = {}
      query_params[:'destPath'] = dest_path
      query_params[:'srcStorageName'] = opts[:'src_storage_name'] if !opts[:'src_storage_name'].nil?
      query_params[:'destStorageName'] = opts[:'dest_storage_name'] if !opts[:'dest_storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#copy_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create the folder
    # 
    # @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [nil]
    def create_folder(path, opts = {})
      @api_client.request_token_if_needed
      create_folder_with_http_info(path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                create_folder_with_http_info(path, opts)
        else
          raise
        end
      return nil
    end

    # Create the folder
    # 
    # @param path Folder path to create e.g. &#39;folder_1/folder_2/&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_folder_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.create_folder ..."
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ThreeDCloudApi.create_folder"
      end
      # resource path
      local_var_path = "/3d/storage/folder/{path}".sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#create_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete file
    # 
    # @param path File path e.g. &#39;/folder/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID to delete
    # @return [nil]
    def delete_file(path, opts = {})
      @api_client.request_token_if_needed
      delete_file_with_http_info(path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                delete_file_with_http_info(path, opts)
        else
          raise
        end
      return nil
    end

    # Delete file
    # 
    # @param path File path e.g. &#39;/folder/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID to delete
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_file_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.delete_file ..."
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ThreeDCloudApi.delete_file"
      end
      # resource path
      local_var_path = "/3d/storage/file/{path}".sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#delete_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete folder
    # 
    # @param path Folder path e.g. &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [BOOLEAN] :recursive Enable to delete folders, subfolders and files (default to false)
    # @return [nil]
    def delete_folder(path, opts = {})
      @api_client.request_token_if_needed
      delete_folder_with_http_info(path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                delete_folder_with_http_info(path, opts)
        else
          raise
        end
      return nil
    end

    # Delete folder
    # 
    # @param path Folder path e.g. &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [BOOLEAN] :recursive Enable to delete folders, subfolders and files
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_folder_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.delete_folder ..."
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ThreeDCloudApi.delete_folder"
      end
      # resource path
      local_var_path = "/3d/storage/folder/{path}".sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?
      query_params[:'recursive'] = opts[:'recursive'] if !opts[:'recursive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#delete_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete nodes from scene,nodes are addressed by Object Addressing Path
    # 
    # @param name The name of the source file.
    # @param objectaddressingpath The object addressing path.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder of the source file.
    # @option opts [String] :storage The storage type
    # @return [File]
    def delete_nodes(name, objectaddressingpath, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = delete_nodes_with_http_info(name, objectaddressingpath, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = delete_nodes_with_http_info(name, objectaddressingpath, opts)
        else
          raise
        end
      return data
    end

    # Delete nodes from scene,nodes are addressed by Object Addressing Path
    # 
    # @param name The name of the source file.
    # @param objectaddressingpath The object addressing path.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder of the source file.
    # @option opts [String] :storage The storage type
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def delete_nodes_with_http_info(name, objectaddressingpath, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.delete_nodes ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ThreeDCloudApi.delete_nodes"
      end
      # verify the required parameter 'objectaddressingpath' is set
      if @api_client.config.client_side_validation && objectaddressingpath.nil?
        fail ArgumentError, "Missing the required parameter 'objectaddressingpath' when calling ThreeDCloudApi.delete_nodes"
      end
      # resource path
      local_var_path = "/3d/nodes"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'objectaddressingpath'] = objectaddressingpath
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#delete_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download file
    # 
    # @param path File path e.g. &#39;/folder/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID to download
    # @return [File]
    def download_file(path, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = download_file_with_http_info(path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = download_file_with_http_info(path, opts)
        else
          raise
        end
      return data
    end

    # Download file
    # 
    # @param path File path e.g. &#39;/folder/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID to download
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def download_file_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.download_file ..."
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ThreeDCloudApi.download_file"
      end
      # resource path
      local_var_path = "/3d/storage/file/{path}".sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#download_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get disc usage
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [DiscUsage]
    def get_disc_usage(opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = get_disc_usage_with_http_info(opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = get_disc_usage_with_http_info(opts)
        else
          raise
        end
      return data
    end

    # Get disc usage
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [Array<(DiscUsage, Fixnum, Hash)>] DiscUsage data, response status code and response headers
    def get_disc_usage_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.get_disc_usage ..."
      end
      # resource path
      local_var_path = "/3d/storage/disc"

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DiscUsage')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#get_disc_usage\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get file versions
    # 
    # @param path File path e.g. &#39;/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [FileVersions]
    def get_file_versions(path, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = get_file_versions_with_http_info(path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = get_file_versions_with_http_info(path, opts)
        else
          raise
        end
      return data
    end

    # Get file versions
    # 
    # @param path File path e.g. &#39;/file.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [Array<(FileVersions, Fixnum, Hash)>] FileVersions data, response status code and response headers
    def get_file_versions_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.get_file_versions ..."
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ThreeDCloudApi.get_file_versions"
      end
      # resource path
      local_var_path = "/3d/storage/version/{path}".sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FileVersions')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#get_file_versions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all files and folders within a folder
    # 
    # @param path Folder path e.g. &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [FilesList]
    def get_files_list(path, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = get_files_list_with_http_info(path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = get_files_list_with_http_info(path, opts)
        else
          raise
        end
      return data
    end

    # Get all files and folders within a folder
    # 
    # @param path Folder path e.g. &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [Array<(FilesList, Fixnum, Hash)>] FilesList data, response status code and response headers
    def get_files_list_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.get_files_list ..."
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ThreeDCloudApi.get_files_list"
      end
      # resource path
      local_var_path = "/3d/storage/folder/{path}".sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FilesList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#get_files_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move file
    # 
    # @param src_path Source file path e.g. &#39;/src.ext&#39;
    # @param dest_path Destination file path e.g. &#39;/dest.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @option opts [String] :version_id File version ID to move
    # @return [nil]
    def move_file(src_path, dest_path, opts = {})
      @api_client.request_token_if_needed
      move_file_with_http_info(src_path, dest_path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                move_file_with_http_info(src_path, dest_path, opts)
        else
          raise
        end
      return nil
    end

    # Move file
    # 
    # @param src_path Source file path e.g. &#39;/src.ext&#39;
    # @param dest_path Destination file path e.g. &#39;/dest.ext&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @option opts [String] :version_id File version ID to move
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_file_with_http_info(src_path, dest_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.move_file ..."
      end
      # verify the required parameter 'src_path' is set
      if @api_client.config.client_side_validation && src_path.nil?
        fail ArgumentError, "Missing the required parameter 'src_path' when calling ThreeDCloudApi.move_file"
      end
      # verify the required parameter 'dest_path' is set
      if @api_client.config.client_side_validation && dest_path.nil?
        fail ArgumentError, "Missing the required parameter 'dest_path' when calling ThreeDCloudApi.move_file"
      end
      # resource path
      local_var_path = "/3d/storage/file/move/{srcPath}".sub('{' + 'srcPath' + '}', src_path.to_s)

      # query parameters
      query_params = {}
      query_params[:'destPath'] = dest_path
      query_params[:'srcStorageName'] = opts[:'src_storage_name'] if !opts[:'src_storage_name'].nil?
      query_params[:'destStorageName'] = opts[:'dest_storage_name'] if !opts[:'dest_storage_name'].nil?
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#move_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Move folder
    # 
    # @param src_path Folder path to move e.g. &#39;/folder&#39;
    # @param dest_path Destination folder path to move to e.g &#39;/dst&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @return [nil]
    def move_folder(src_path, dest_path, opts = {})
      @api_client.request_token_if_needed
      move_folder_with_http_info(src_path, dest_path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                move_folder_with_http_info(src_path, dest_path, opts)
        else
          raise
        end
      return nil
    end

    # Move folder
    # 
    # @param src_path Folder path to move e.g. &#39;/folder&#39;
    # @param dest_path Destination folder path to move to e.g &#39;/dst&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :src_storage_name Source storage name
    # @option opts [String] :dest_storage_name Destination storage name
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def move_folder_with_http_info(src_path, dest_path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.move_folder ..."
      end
      # verify the required parameter 'src_path' is set
      if @api_client.config.client_side_validation && src_path.nil?
        fail ArgumentError, "Missing the required parameter 'src_path' when calling ThreeDCloudApi.move_folder"
      end
      # verify the required parameter 'dest_path' is set
      if @api_client.config.client_side_validation && dest_path.nil?
        fail ArgumentError, "Missing the required parameter 'dest_path' when calling ThreeDCloudApi.move_folder"
      end
      # resource path
      local_var_path = "/3d/storage/folder/move/{srcPath}".sub('{' + 'srcPath' + '}', src_path.to_s)

      # query parameters
      query_params = {}
      query_params[:'destPath'] = dest_path
      query_params[:'srcStorageName'] = opts[:'src_storage_name'] if !opts[:'src_storage_name'].nil?
      query_params[:'destStorageName'] = opts[:'dest_storage_name'] if !opts[:'dest_storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#move_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Access token
    # 
    # @param grant_type Grant Type
    # @param client_id App SID
    # @param client_secret App Key
    # @param [Hash] opts the optional parameters
    # @return [AccessTokenResponse]
    def o_auth_post(grant_type, client_id, client_secret, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = o_auth_post_with_http_info(grant_type, client_id, client_secret, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = o_auth_post_with_http_info(grant_type, client_id, client_secret, opts)
        else
          raise
        end
      return data
    end

    # Get Access token
    # 
    # @param grant_type Grant Type
    # @param client_id App SID
    # @param client_secret App Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccessTokenResponse, Fixnum, Hash)>] AccessTokenResponse data, response status code and response headers
    def o_auth_post_with_http_info(grant_type, client_id, client_secret, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.o_auth_post ..."
      end
      # verify the required parameter 'grant_type' is set
      if @api_client.config.client_side_validation && grant_type.nil?
        fail ArgumentError, "Missing the required parameter 'grant_type' when calling ThreeDCloudApi.o_auth_post"
      end
      # verify the required parameter 'client_id' is set
      if @api_client.config.client_side_validation && client_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_id' when calling ThreeDCloudApi.o_auth_post"
      end
      # verify the required parameter 'client_secret' is set
      if @api_client.config.client_side_validation && client_secret.nil?
        fail ArgumentError, "Missing the required parameter 'client_secret' when calling ThreeDCloudApi.o_auth_post"
      end
      # resource path
      local_var_path = "/connect/token"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["grant_type"] = grant_type
      form_params["client_id"] = client_id
      form_params["client_secret"] = client_secret

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AccessTokenResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#o_auth_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if file or folder exists
    # 
    # @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID
    # @return [ObjectExist]
    def object_exists(path, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = object_exists_with_http_info(path, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = object_exists_with_http_info(path, opts)
        else
          raise
        end
      return data
    end

    # Check if file or folder exists
    # 
    # @param path File or folder path e.g. &#39;/file.ext&#39; or &#39;/folder&#39;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @option opts [String] :version_id File version ID
    # @return [Array<(ObjectExist, Fixnum, Hash)>] ObjectExist data, response status code and response headers
    def object_exists_with_http_info(path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.object_exists ..."
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ThreeDCloudApi.object_exists"
      end
      # resource path
      local_var_path = "/3d/storage/exist/{path}".sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?
      query_params[:'versionId'] = opts[:'version_id'] if !opts[:'version_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ObjectExist')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#object_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert file on server to other formats with fileformat parameter             
    # 
    # @param name The name of the source file.
    # @param newformat The format of the new file.
    # @param newfilename The name of the new file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder of the source file.
    # @option opts [BOOLEAN] :is_overwrite Overwrite the source file? true or false. (default to false)
    # @option opts [String] :storage The storage type.
    # @return [File]
    def post_convert_by_format(name, newformat, newfilename, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = post_convert_by_format_with_http_info(name, newformat, newfilename, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = post_convert_by_format_with_http_info(name, newformat, newfilename, opts)
        else
          raise
        end
      return data
    end

    # Convert file on server to other formats with fileformat parameter             
    # 
    # @param name The name of the source file.
    # @param newformat The format of the new file.
    # @param newfilename The name of the new file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder of the source file.
    # @option opts [BOOLEAN] :is_overwrite Overwrite the source file? true or false.
    # @option opts [String] :storage The storage type.
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def post_convert_by_format_with_http_info(name, newformat, newfilename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.post_convert_by_format ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ThreeDCloudApi.post_convert_by_format"
      end
      # verify the required parameter 'newformat' is set
      if @api_client.config.client_side_validation && newformat.nil?
        fail ArgumentError, "Missing the required parameter 'newformat' when calling ThreeDCloudApi.post_convert_by_format"
      end
      # verify the required parameter 'newfilename' is set
      if @api_client.config.client_side_validation && newfilename.nil?
        fail ArgumentError, "Missing the required parameter 'newfilename' when calling ThreeDCloudApi.post_convert_by_format"
      end
      # resource path
      local_var_path = "/3d/saveas/newformat"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'newformat'] = newformat
      query_params[:'newfilename'] = newfilename
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'IsOverwrite'] = opts[:'is_overwrite'] if !opts[:'is_overwrite'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#post_convert_by_format\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert file on server to other formats with saveOption parameter             
    # 
    # @param name The name of the source file.
    # @param save_options The saveOptions to save the file
    # @param newfilename The name of the new file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder of the source file
    # @option opts [BOOLEAN] :is_overwrite Overwrite the source file? true or false (default to false)
    # @option opts [String] :storage The storage type
    # @return [File]
    def post_convert_by_opt(name, save_options, newfilename, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = post_convert_by_opt_with_http_info(name, save_options, newfilename, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = post_convert_by_opt_with_http_info(name, save_options, newfilename, opts)
        else
          raise
        end
      return data
    end

    # Convert file on server to other formats with saveOption parameter             
    # 
    # @param name The name of the source file.
    # @param save_options The saveOptions to save the file
    # @param newfilename The name of the new file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder of the source file
    # @option opts [BOOLEAN] :is_overwrite Overwrite the source file? true or false
    # @option opts [String] :storage The storage type
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def post_convert_by_opt_with_http_info(name, save_options, newfilename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.post_convert_by_opt ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ThreeDCloudApi.post_convert_by_opt"
      end
      # verify the required parameter 'save_options' is set
      if @api_client.config.client_side_validation && save_options.nil?
        fail ArgumentError, "Missing the required parameter 'save_options' when calling ThreeDCloudApi.post_convert_by_opt"
      end
      # verify the required parameter 'newfilename' is set
      if @api_client.config.client_side_validation && newfilename.nil?
        fail ArgumentError, "Missing the required parameter 'newfilename' when calling ThreeDCloudApi.post_convert_by_opt"
      end
      # resource path
      local_var_path = "/3d/saveas/saveoption"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'newfilename'] = newfilename
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'IsOverwrite'] = opts[:'is_overwrite'] if !opts[:'is_overwrite'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(save_options)
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#post_convert_by_opt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create new file with specified format.             
    # 
    # @param format The format of the new file.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def post_create(format, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = post_create_with_http_info(format, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = post_create_with_http_info(format, opts)
        else
          raise
        end
      return data
    end

    # Create new file with specified format.             
    # 
    # @param format The format of the new file.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def post_create_with_http_info(format, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.post_create ..."
      end
      # verify the required parameter 'format' is set
      if @api_client.config.client_side_validation && format.nil?
        fail ArgumentError, "Missing the required parameter 'format' when calling ThreeDCloudApi.post_create"
      end
      # resource path
      local_var_path = "/3d/new"

      # query parameters
      query_params = {}
      query_params[:'format'] = format

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['multipart/form-data'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#post_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Parametric Modeling, Create a Entity with size and located in ...
    # 
    # @param name The name of the source file.
    # @param modeldata ModelData struct.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :newformat new format of the source file.
    # @option opts [String] :folder The folder of the source file.
    # @option opts [String] :storage The storage type
    # @return [File]
    def post_model(name, modeldata, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = post_model_with_http_info(name, modeldata, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = post_model_with_http_info(name, modeldata, opts)
        else
          raise
        end
      return data
    end

    # Parametric Modeling, Create a Entity with size and located in ...
    # 
    # @param name The name of the source file.
    # @param modeldata ModelData struct.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :newformat new format of the source file.
    # @option opts [String] :folder The folder of the source file.
    # @option opts [String] :storage The storage type
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def post_model_with_http_info(name, modeldata, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.post_model ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ThreeDCloudApi.post_model"
      end
      # verify the required parameter 'modeldata' is set
      if @api_client.config.client_side_validation && modeldata.nil?
        fail ArgumentError, "Missing the required parameter 'modeldata' when calling ThreeDCloudApi.post_model"
      end
      # resource path
      local_var_path = "/3d/root"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'newformat'] = opts[:'newformat'] if !opts[:'newformat'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(modeldata)
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#post_model\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract raw data(without any modification) from a password protected PDF file             
    # 
    # @param name The PDF file&#39;s mame
    # @param multifileprefix The file name for generated raw date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password The password to open the PDF
    # @option opts [String] :folder The folder for source file
    # @option opts [String] :storage The storage type
    # @return [File]
    def post_pdf_raw_data(name, multifileprefix, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = post_pdf_raw_data_with_http_info(name, multifileprefix, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = post_pdf_raw_data_with_http_info(name, multifileprefix, opts)
        else
          raise
        end
      return data
    end

    # Extract raw data(without any modification) from a password protected PDF file             
    # 
    # @param name The PDF file&#39;s mame
    # @param multifileprefix The file name for generated raw date
    # @param [Hash] opts the optional parameters
    # @option opts [String] :password The password to open the PDF
    # @option opts [String] :folder The folder for source file
    # @option opts [String] :storage The storage type
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def post_pdf_raw_data_with_http_info(name, multifileprefix, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.post_pdf_raw_data ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ThreeDCloudApi.post_pdf_raw_data"
      end
      # verify the required parameter 'multifileprefix' is set
      if @api_client.config.client_side_validation && multifileprefix.nil?
        fail ArgumentError, "Missing the required parameter 'multifileprefix' when calling ThreeDCloudApi.post_pdf_raw_data"
      end
      # resource path
      local_var_path = "/3d/extract/rawdata"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'multifileprefix'] = multifileprefix
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#post_pdf_raw_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert part of the file into different format
    # 
    # @param name The name of the source file
    # @param objectaddressingpath The object addressing path
    # @param newformat The format of the new file
    # @param newfilename The name of the new file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder of the source file
    # @option opts [BOOLEAN] :is_overwrite Overwrite the source file? true or false (default to false)
    # @option opts [String] :storage The storage type
    # @return [File]
    def post_save_as_part(name, objectaddressingpath, newformat, newfilename, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = post_save_as_part_with_http_info(name, objectaddressingpath, newformat, newfilename, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = post_save_as_part_with_http_info(name, objectaddressingpath, newformat, newfilename, opts)
        else
          raise
        end
      return data
    end

    # Convert part of the file into different format
    # 
    # @param name The name of the source file
    # @param objectaddressingpath The object addressing path
    # @param newformat The format of the new file
    # @param newfilename The name of the new file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder of the source file
    # @option opts [BOOLEAN] :is_overwrite Overwrite the source file? true or false
    # @option opts [String] :storage The storage type
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def post_save_as_part_with_http_info(name, objectaddressingpath, newformat, newfilename, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.post_save_as_part ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ThreeDCloudApi.post_save_as_part"
      end
      # verify the required parameter 'objectaddressingpath' is set
      if @api_client.config.client_side_validation && objectaddressingpath.nil?
        fail ArgumentError, "Missing the required parameter 'objectaddressingpath' when calling ThreeDCloudApi.post_save_as_part"
      end
      # verify the required parameter 'newformat' is set
      if @api_client.config.client_side_validation && newformat.nil?
        fail ArgumentError, "Missing the required parameter 'newformat' when calling ThreeDCloudApi.post_save_as_part"
      end
      # verify the required parameter 'newfilename' is set
      if @api_client.config.client_side_validation && newfilename.nil?
        fail ArgumentError, "Missing the required parameter 'newfilename' when calling ThreeDCloudApi.post_save_as_part"
      end
      # resource path
      local_var_path = "/3d/saveas/part"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'objectaddressingpath'] = objectaddressingpath
      query_params[:'newformat'] = newformat
      query_params[:'newfilename'] = newfilename
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'IsOverwrite'] = opts[:'is_overwrite'] if !opts[:'is_overwrite'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#post_save_as_part\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract and save in different format             
    # 
    # @param name The PDF file&#39;s mame
    # @param multifileprefix The file name for extracted scene
    # @param [Hash] opts the optional parameters
    # @option opts [String] :newformat The format of new file
    # @option opts [String] :password The password to open the PDF
    # @option opts [String] :folder The folder for source file
    # @option opts [String] :storage The storage type
    # @return [File]
    def post_scene_to_file(name, multifileprefix, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = post_scene_to_file_with_http_info(name, multifileprefix, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = post_scene_to_file_with_http_info(name, multifileprefix, opts)
        else
          raise
        end
      return data
    end

    # Extract and save in different format             
    # 
    # @param name The PDF file&#39;s mame
    # @param multifileprefix The file name for extracted scene
    # @param [Hash] opts the optional parameters
    # @option opts [String] :newformat The format of new file
    # @option opts [String] :password The password to open the PDF
    # @option opts [String] :folder The folder for source file
    # @option opts [String] :storage The storage type
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def post_scene_to_file_with_http_info(name, multifileprefix, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.post_scene_to_file ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ThreeDCloudApi.post_scene_to_file"
      end
      # verify the required parameter 'multifileprefix' is set
      if @api_client.config.client_side_validation && multifileprefix.nil?
        fail ArgumentError, "Missing the required parameter 'multifileprefix' when calling ThreeDCloudApi.post_scene_to_file"
      end
      # resource path
      local_var_path = "/3d/extract/scene"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'multifileprefix'] = multifileprefix
      query_params[:'newformat'] = opts[:'newformat'] if !opts[:'newformat'].nil?
      query_params[:'password'] = opts[:'password'] if !opts[:'password'].nil?
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#post_scene_to_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Triangulate whole file and save to the different file
    # 
    # @param name The file&#39;s mame
    # @param newfilename The new file&#39;s mame
    # @param newformat The new file&#39;s format
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder for source file
    # @option opts [String] :storage The storage type
    # @return [File]
    def post_triangulate_new(name, newfilename, newformat, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = post_triangulate_new_with_http_info(name, newfilename, newformat, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = post_triangulate_new_with_http_info(name, newfilename, newformat, opts)
        else
          raise
        end
      return data
    end

    # Triangulate whole file and save to the different file
    # 
    # @param name The file&#39;s mame
    # @param newfilename The new file&#39;s mame
    # @param newformat The new file&#39;s format
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder for source file
    # @option opts [String] :storage The storage type
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def post_triangulate_new_with_http_info(name, newfilename, newformat, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.post_triangulate_new ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ThreeDCloudApi.post_triangulate_new"
      end
      # verify the required parameter 'newfilename' is set
      if @api_client.config.client_side_validation && newfilename.nil?
        fail ArgumentError, "Missing the required parameter 'newfilename' when calling ThreeDCloudApi.post_triangulate_new"
      end
      # verify the required parameter 'newformat' is set
      if @api_client.config.client_side_validation && newformat.nil?
        fail ArgumentError, "Missing the required parameter 'newformat' when calling ThreeDCloudApi.post_triangulate_new"
      end
      # resource path
      local_var_path = "/3d/triangulate/new"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'newfilename'] = newfilename
      query_params[:'newformat'] = newformat
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#post_triangulate_new\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Triangulate whole file and save to original file
    # 
    # @param name The file&#39;s mame
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder for source file
    # @option opts [String] :storage The storage type
    # @return [File]
    def post_triangulate_original(name, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = post_triangulate_original_with_http_info(name, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = post_triangulate_original_with_http_info(name, opts)
        else
          raise
        end
      return data
    end

    # Triangulate whole file and save to original file
    # 
    # @param name The file&#39;s mame
    # @param [Hash] opts the optional parameters
    # @option opts [String] :folder The folder for source file
    # @option opts [String] :storage The storage type
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def post_triangulate_original_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.post_triangulate_original ..."
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling ThreeDCloudApi.post_triangulate_original"
      end
      # resource path
      local_var_path = "/3d/triangulate/original"

      # query parameters
      query_params = {}
      query_params[:'name'] = name
      query_params[:'folder'] = opts[:'folder'] if !opts[:'folder'].nil?
      query_params[:'storage'] = opts[:'storage'] if !opts[:'storage'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#post_triangulate_original\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check if storage exists
    # 
    # @param storage_name Storage name
    # @param [Hash] opts the optional parameters
    # @return [StorageExist]
    def storage_exists(storage_name, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = storage_exists_with_http_info(storage_name, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = storage_exists_with_http_info(storage_name, opts)
        else
          raise
        end
      return data
    end

    # Check if storage exists
    # 
    # @param storage_name Storage name
    # @param [Hash] opts the optional parameters
    # @return [Array<(StorageExist, Fixnum, Hash)>] StorageExist data, response status code and response headers
    def storage_exists_with_http_info(storage_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.storage_exists ..."
      end
      # verify the required parameter 'storage_name' is set
      if @api_client.config.client_side_validation && storage_name.nil?
        fail ArgumentError, "Missing the required parameter 'storage_name' when calling ThreeDCloudApi.storage_exists"
      end
      # resource path
      local_var_path = "/3d/storage/{storageName}/exist".sub('{' + 'storageName' + '}', storage_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StorageExist')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#storage_exists\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload file
    # 
    # @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             
    # @param file File to upload
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [FilesUploadResult]
    def upload_file(path, file, opts = {})
      @api_client.request_token_if_needed
      data, _status_code, _headers = upload_file_with_http_info(path, file, opts)
      rescue ApiError => error
        if error.code == 401
          @api_client.request_token_if_needed
                data, _status_code, _headers = upload_file_with_http_info(path, file, opts)
        else
          raise
        end
      return data
    end

    # Upload file
    # 
    # @param path Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext             If the content is multipart and path does not contains the file name it tries to get them from filename parameter             from Content-Disposition header.             
    # @param file File to upload
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_name Storage name
    # @return [Array<(FilesUploadResult, Fixnum, Hash)>] FilesUploadResult data, response status code and response headers
    def upload_file_with_http_info(path, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ThreeDCloudApi.upload_file ..."
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling ThreeDCloudApi.upload_file"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ThreeDCloudApi.upload_file"
      end
      # resource path
      local_var_path = "/3d/storage/file/{path}".sub('{' + 'path' + '}', path.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageName'] = opts[:'storage_name'] if !opts[:'storage_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      # Fix header in file
      post_body = nil
      # Fix header in file
      post_body = file
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/octet-stream'])

      # http body (model)
      # Fix header in file
      # post_body = nil
      auth_names = ['JWT']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FilesUploadResult')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ThreeDCloudApi#upload_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
