=begin
#Aspose.ThreeD Cloud API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.11-SNAPSHOT

=end

require 'date'

module AsposeThreeDCloud

  class Discreet3DSSaveOption
    # Gets or sets  of the SaveFormat.
    attr_accessor :save_format

    # Allow user to handle how to manage the external dependencies during load/save.
    attr_accessor :file_system

    # Some files like OBJ depends on external file, the lookup paths will allows Aspose.3D to look for external file to load
    attr_accessor :lookup_paths

    # The file name of the exporting/importing scene. This is optional, but useful when serialize external assets like OBJ's material.
    attr_accessor :file_name

    # The file format��like FBX,U3D,PDF ....
    attr_accessor :file_format

    # Only for LocalFileSystem
    attr_accessor :directory

    # Gets or sets whether export all lights in the scene.
    attr_accessor :export_light

    # Gets or sets whether export all cameras in the scene
    attr_accessor :export_camera

    # The separator between object's name and the duplicated counter, default value is \"_\". When scene contains objects that use the same name, Aspose.3D 3DS exporter will generate a different name for the object. For example there's two nodes named \"Box\", the first node will have a name \"Box\", and the second node will get a new name \"Box_2\" using the default configuration
    attr_accessor :duplicated_name_separator

    # The counter used by generating new name for duplicated names
    attr_accessor :duplicated_name_counter_base

    # The format of the duplicated counter, default value is empty string.
    attr_accessor :duplicated_name_counter_format

    # Gets or sets the master scale used in exporting.
    attr_accessor :master_scale

    # Gets or sets the GammaCorrectedColor.
    attr_accessor :gamma_corrected_color

    # Gets or sets flip coordinate system of control points/normal during importing/exporting..
    attr_accessor :flip_coordinate_system

    # Gets or sets the HighPreciseColor.
    attr_accessor :high_precise_color


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'save_format' => :'SaveFormat',
        :'file_system' => :'FileSystem',
        :'lookup_paths' => :'LookupPaths',
        :'file_name' => :'FileName',
        :'file_format' => :'FileFormat',
        :'directory' => :'directory',
        :'export_light' => :'ExportLight',
        :'export_camera' => :'ExportCamera',
        :'duplicated_name_separator' => :'DuplicatedNameSeparator',
        :'duplicated_name_counter_base' => :'DuplicatedNameCounterBase',
        :'duplicated_name_counter_format' => :'DuplicatedNameCounterFormat',
        :'master_scale' => :'MasterScale',
        :'gamma_corrected_color' => :'GammaCorrectedColor',
        :'flip_coordinate_system' => :'FlipCoordinateSystem',
        :'high_precise_color' => :'HighPreciseColor'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'save_format' => :'SaveFormat',
        :'file_system' => :'FileSystem',
        :'lookup_paths' => :'Array<String>',
        :'file_name' => :'String',
        :'file_format' => :'String',
        :'directory' => :'String',
        :'export_light' => :'BOOLEAN',
        :'export_camera' => :'BOOLEAN',
        :'duplicated_name_separator' => :'String',
        :'duplicated_name_counter_base' => :'Integer',
        :'duplicated_name_counter_format' => :'String',
        :'master_scale' => :'Float',
        :'gamma_corrected_color' => :'BOOLEAN',
        :'flip_coordinate_system' => :'BOOLEAN',
        :'high_precise_color' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'SaveFormat')
        self.save_format = attributes[:'SaveFormat']
      end

      if attributes.has_key?(:'FileSystem')
        self.file_system = attributes[:'FileSystem']
      end

      if attributes.has_key?(:'LookupPaths')
        if (value = attributes[:'LookupPaths']).is_a?(Array)
          self.lookup_paths = value
        end
      end

      if attributes.has_key?(:'FileName')
        self.file_name = attributes[:'FileName']
      end

      if attributes.has_key?(:'FileFormat')
        self.file_format = attributes[:'FileFormat']
      end

      if attributes.has_key?(:'directory')
        self.directory = attributes[:'directory']
      end

      if attributes.has_key?(:'ExportLight')
        self.export_light = attributes[:'ExportLight']
      end

      if attributes.has_key?(:'ExportCamera')
        self.export_camera = attributes[:'ExportCamera']
      end

      if attributes.has_key?(:'DuplicatedNameSeparator')
        self.duplicated_name_separator = attributes[:'DuplicatedNameSeparator']
      end

      if attributes.has_key?(:'DuplicatedNameCounterBase')
        self.duplicated_name_counter_base = attributes[:'DuplicatedNameCounterBase']
      end

      if attributes.has_key?(:'DuplicatedNameCounterFormat')
        self.duplicated_name_counter_format = attributes[:'DuplicatedNameCounterFormat']
      end

      if attributes.has_key?(:'MasterScale')
        self.master_scale = attributes[:'MasterScale']
      end

      if attributes.has_key?(:'GammaCorrectedColor')
        self.gamma_corrected_color = attributes[:'GammaCorrectedColor']
      end

      if attributes.has_key?(:'FlipCoordinateSystem')
        self.flip_coordinate_system = attributes[:'FlipCoordinateSystem']
      end

      if attributes.has_key?(:'HighPreciseColor')
        self.high_precise_color = attributes[:'HighPreciseColor']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          save_format == o.save_format &&
          file_system == o.file_system &&
          lookup_paths == o.lookup_paths &&
          file_name == o.file_name &&
          file_format == o.file_format &&
          directory == o.directory &&
          export_light == o.export_light &&
          export_camera == o.export_camera &&
          duplicated_name_separator == o.duplicated_name_separator &&
          duplicated_name_counter_base == o.duplicated_name_counter_base &&
          duplicated_name_counter_format == o.duplicated_name_counter_format &&
          master_scale == o.master_scale &&
          gamma_corrected_color == o.gamma_corrected_color &&
          flip_coordinate_system == o.flip_coordinate_system &&
          high_precise_color == o.high_precise_color
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [save_format, file_system, lookup_paths, file_name, file_format, directory, export_light, export_camera, duplicated_name_separator, duplicated_name_counter_base, duplicated_name_counter_format, master_scale, gamma_corrected_color, flip_coordinate_system, high_precise_color].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AsposeThreeDCloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
