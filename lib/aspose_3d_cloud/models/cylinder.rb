=begin
#Aspose.3D Cloud API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.11-SNAPSHOT

=end

require 'date'

module AsposeThreeDCloud

  class Cylinder
    # Gets or sets the name of the cylinder             
    attr_accessor :name

    # Gets or sets the radius of cylinder's top cap.
    attr_accessor :radius_top

    # Gets or sets the radius bottoof cylinder's bottom cap.             
    attr_accessor :radius_bottom

    # Gets or sets the height of the cylinder.
    attr_accessor :height

    # Gets or sets the radial segments.
    attr_accessor :radial_segments

    # Gets or sets the height segments.
    attr_accessor :height_segments

    # Gets or sets a value indicating whether this Aspose.ThreeD.Entities.Cylinder open ended. The default value is false.
    attr_accessor :open_ended

    # Gets or sets the theta start. The default value is 0.             
    attr_accessor :theta_start

    # Gets or sets the length of the theta. The default value is 2p
    attr_accessor :theta_length


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'Name',
        :'radius_top' => :'RadiusTop',
        :'radius_bottom' => :'RadiusBottom',
        :'height' => :'Height',
        :'radial_segments' => :'RadialSegments',
        :'height_segments' => :'HeightSegments',
        :'open_ended' => :'OpenEnded',
        :'theta_start' => :'ThetaStart',
        :'theta_length' => :'ThetaLength'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'name' => :'String',
        :'radius_top' => :'Float',
        :'radius_bottom' => :'Float',
        :'height' => :'Float',
        :'radial_segments' => :'Integer',
        :'height_segments' => :'Integer',
        :'open_ended' => :'BOOLEAN',
        :'theta_start' => :'Float',
        :'theta_length' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'Name')
        self.name = attributes[:'Name']
      end

      if attributes.has_key?(:'RadiusTop')
        self.radius_top = attributes[:'RadiusTop']
      end

      if attributes.has_key?(:'RadiusBottom')
        self.radius_bottom = attributes[:'RadiusBottom']
      end

      if attributes.has_key?(:'Height')
        self.height = attributes[:'Height']
      end

      if attributes.has_key?(:'RadialSegments')
        self.radial_segments = attributes[:'RadialSegments']
      end

      if attributes.has_key?(:'HeightSegments')
        self.height_segments = attributes[:'HeightSegments']
      end

      if attributes.has_key?(:'OpenEnded')
        self.open_ended = attributes[:'OpenEnded']
      end

      if attributes.has_key?(:'ThetaStart')
        self.theta_start = attributes[:'ThetaStart']
      end

      if attributes.has_key?(:'ThetaLength')
        self.theta_length = attributes[:'ThetaLength']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @radius_top.nil?
        invalid_properties.push("invalid value for 'radius_top', radius_top cannot be nil.")
      end

      if @radius_bottom.nil?
        invalid_properties.push("invalid value for 'radius_bottom', radius_bottom cannot be nil.")
      end

      if @height.nil?
        invalid_properties.push("invalid value for 'height', height cannot be nil.")
      end

      if @radial_segments.nil?
        invalid_properties.push("invalid value for 'radial_segments', radial_segments cannot be nil.")
      end

      if @height_segments.nil?
        invalid_properties.push("invalid value for 'height_segments', height_segments cannot be nil.")
      end

      if @open_ended.nil?
        invalid_properties.push("invalid value for 'open_ended', open_ended cannot be nil.")
      end

      if @theta_start.nil?
        invalid_properties.push("invalid value for 'theta_start', theta_start cannot be nil.")
      end

      if @theta_length.nil?
        invalid_properties.push("invalid value for 'theta_length', theta_length cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @radius_top.nil?
      return false if @radius_bottom.nil?
      return false if @height.nil?
      return false if @radial_segments.nil?
      return false if @height_segments.nil?
      return false if @open_ended.nil?
      return false if @theta_start.nil?
      return false if @theta_length.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          radius_top == o.radius_top &&
          radius_bottom == o.radius_bottom &&
          height == o.height &&
          radial_segments == o.radial_segments &&
          height_segments == o.height_segments &&
          open_ended == o.open_ended &&
          theta_start == o.theta_start &&
          theta_length == o.theta_length
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [name, radius_top, radius_bottom, height, radial_segments, height_segments, open_ended, theta_start, theta_length].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AsposeThreeDCloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
