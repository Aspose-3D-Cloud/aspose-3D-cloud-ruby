=begin
#Aspose.3D Cloud API Reference

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 3.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.11-SNAPSHOT

=end

require 'date'

module AsposeThreeDCloud

  class GLTFSaveOption
    # Gets or sets  of the SaveFormat.
    attr_accessor :save_format

    # Some files like OBJ depends on external file, the lookup paths will allows Aspose.3D to look for external file to load
    attr_accessor :lookup_paths

    # The file name of the exporting/importing scene. This is optional, but useful when serialize external assets like OBJ's material.
    attr_accessor :file_name

    # The file format like FBX,U3D,PDF ....
    attr_accessor :file_format

    # The JSON content of GLTF file is indented for human reading, default value is false.
    attr_accessor :pretty_print

    # Embed all external assets as base64 into single file in ASCII mode, default value is false.
    attr_accessor :embed_assets

    # Serialize materials using KHR common material extensions, default value is false. Set this to false will cause Aspose.3D export a set of vertex/fragment shader if Aspose.ThreeD.Formats.GLTFSaveOptions.ExportShaders
    attr_accessor :use_common_materials

    # Flip texture coordinate v(t) component, default value is true.
    attr_accessor :flip_tex_coord_v

    # The file name of the external buffer file used to store binary data. If this file is not specified, Aspose.3D will generate a name for you. This is ignored when export glTF in binary mode.
    attr_accessor :buffer_file

    # Save scene object's dynamic properties into 'extra' fields in the generated glTF file. This is useful to provide application-specific data. Default value is false..
    attr_accessor :save_extras

    # Gets or sets whether to enable draco compression.
    attr_accessor :draco_compression

    # Gets or sets  of the FileContent type.
    attr_accessor :file_content_type


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'save_format' => :'SaveFormat',
        :'lookup_paths' => :'LookupPaths',
        :'file_name' => :'FileName',
        :'file_format' => :'FileFormat',
        :'pretty_print' => :'PrettyPrint',
        :'embed_assets' => :'EmbedAssets',
        :'use_common_materials' => :'UseCommonMaterials',
        :'flip_tex_coord_v' => :'FlipTexCoordV',
        :'buffer_file' => :'BufferFile',
        :'save_extras' => :'SaveExtras',
        :'draco_compression' => :'DracoCompression',
        :'file_content_type' => :'FileContentType'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'save_format' => :'SaveFormat',
        :'lookup_paths' => :'Array<String>',
        :'file_name' => :'String',
        :'file_format' => :'String',
        :'pretty_print' => :'BOOLEAN',
        :'embed_assets' => :'BOOLEAN',
        :'use_common_materials' => :'BOOLEAN',
        :'flip_tex_coord_v' => :'BOOLEAN',
        :'buffer_file' => :'BOOLEAN',
        :'save_extras' => :'BOOLEAN',
        :'draco_compression' => :'BOOLEAN',
        :'file_content_type' => :'FileContentType'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'SaveFormat')
        self.save_format = attributes[:'SaveFormat']
      end

      if attributes.has_key?(:'LookupPaths')
        if (value = attributes[:'LookupPaths']).is_a?(Array)
          self.lookup_paths = value
        end
      end

      if attributes.has_key?(:'FileName')
        self.file_name = attributes[:'FileName']
      end

      if attributes.has_key?(:'FileFormat')
        self.file_format = attributes[:'FileFormat']
      end

      if attributes.has_key?(:'PrettyPrint')
        self.pretty_print = attributes[:'PrettyPrint']
      end

      if attributes.has_key?(:'EmbedAssets')
        self.embed_assets = attributes[:'EmbedAssets']
      end

      if attributes.has_key?(:'UseCommonMaterials')
        self.use_common_materials = attributes[:'UseCommonMaterials']
      end

      if attributes.has_key?(:'FlipTexCoordV')
        self.flip_tex_coord_v = attributes[:'FlipTexCoordV']
      end

      if attributes.has_key?(:'BufferFile')
        self.buffer_file = attributes[:'BufferFile']
      end

      if attributes.has_key?(:'SaveExtras')
        self.save_extras = attributes[:'SaveExtras']
      end

      if attributes.has_key?(:'DracoCompression')
        self.draco_compression = attributes[:'DracoCompression']
      end

      if attributes.has_key?(:'FileContentType')
        self.file_content_type = attributes[:'FileContentType']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          save_format == o.save_format &&
          lookup_paths == o.lookup_paths &&
          file_name == o.file_name &&
          file_format == o.file_format &&
          pretty_print == o.pretty_print &&
          embed_assets == o.embed_assets &&
          use_common_materials == o.use_common_materials &&
          flip_tex_coord_v == o.flip_tex_coord_v &&
          buffer_file == o.buffer_file &&
          save_extras == o.save_extras &&
          draco_compression == o.draco_compression &&
          file_content_type == o.file_content_type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [save_format, lookup_paths, file_name, file_format, pretty_print, embed_assets, use_common_materials, flip_tex_coord_v, buffer_file, save_extras, draco_compression, file_content_type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = AsposeThreeDCloud.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
